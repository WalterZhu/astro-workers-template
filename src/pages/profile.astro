---
export const prerender = false;

// 从中间件获取用户ID
const userId = (Astro.locals as any).user?.id;

if (!userId) {
  return Astro.redirect("/");
}

// 获取运行时环境
const runtime = (Astro.locals as any).runtime;
let userData: any = null;
let profileData: any = null;

if (userId && runtime?.env?.DB) {
  try {
    // 查询用户基本信息
    userData = (await runtime.env.DB.prepare(
      "SELECT id, name, email, image FROM users WHERE id = ?"
    )
      .bind(userId)
      .first()) as any;

    // 查询用户配置信息
    profileData = (await runtime.env.DB.prepare(
      "SELECT bio, avatar, theme, language FROM user_profiles WHERE userId = ?"
    )
      .bind(userId)
      .first()) as any;
  } catch (error) {
    console.error("[PROFILE] Database query error:", error);
  }
}

// 默认空数据
const defaultUserData = {
  id: "",
  name: "",
  email: "",
  image: null,
};

const defaultProfileData = {
  bio: "",
  avatar: "",
  theme: "light",
  language: "zh-CN",
};

// 优先使用数据库数据，其次使用默认数据
const finalUserData = userData || defaultUserData;
const finalProfileData = profileData || defaultProfileData;
---

<html lang="zh-CN">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>个人资料 - Astro Template</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          sans-serif;
        margin: 0;
        padding: 20px;
        background: #f5f5f5;
        min-height: 100vh;
      }

      .container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        text-align: center;
      }

      .header h1 {
        margin: 0 0 0.5rem 0;
        font-size: 2rem;
      }

      .header p {
        margin: 0;
        opacity: 0.9;
      }

      .nav {
        background: #f8f9fa;
        padding: 1rem 2rem;
        border-bottom: 1px solid #e9ecef;
      }

      .nav a {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
      }

      .nav a:hover {
        text-decoration: underline;
      }

      .content {
        padding: 2rem;
      }

      .profile-section {
        margin-bottom: 2rem;
      }

      .profile-section h2 {
        color: #333;
        margin-bottom: 1rem;
        font-size: 1.5rem;
        border-bottom: 2px solid #667eea;
        padding-bottom: 0.5rem;
      }

      .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      .form-group.full-width {
        grid-column: 1 / -1;
      }

      label {
        display: block;
        margin-bottom: 0.5rem;
        color: #333;
        font-weight: 500;
      }

      input[type="text"],
      input[type="email"],
      input[type="url"],
      textarea,
      select {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
        box-sizing: border-box;
      }

      input:focus,
      textarea:focus,
      select:focus {
        outline: none;
        border-color: #667eea;
      }

      textarea {
        resize: vertical;
        min-height: 100px;
      }

      .avatar-section {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .avatar-preview {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #666;
        font-size: 2rem;
        font-weight: bold;
      }

      .avatar-preview img {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        object-fit: cover;
      }

      .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
      }

      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
      }

      .btn-secondary {
        background: #6c757d;
        color: white;
      }

      .btn-secondary:hover {
        background: #5a6268;
      }

      .btn-group {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
      }

      .alert {
        padding: 0.75rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
      }

      .alert-success {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
      }

      .alert-error {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
      }

      @media (max-width: 768px) {
        .form-grid {
          grid-template-columns: 1fr;
        }

        .container {
          margin: 10px;
        }

        .header,
        .content {
          padding: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>个人资料</h1>
        <p>管理您的账户信息和偏好设置</p>
      </div>

      <div class="nav">
        <a href="/">← 返回首页</a>
        <div style="float: right;">
          <button type="button" class="btn btn-secondary" id="logout-btn">
            退出登录
          </button>
        </div>
      </div>

      <div class="content">
        <div id="alert-container"></div>

        <form id="profile-form">
          <div class="profile-section">
            <h2>基本信息</h2>

            <div class="form-group">
              <label>头像</label>
              <div class="avatar-section">
                <div class="avatar-preview" id="avatar-preview">
                  {
                    finalProfileData.avatar ? (
                      <img src={finalProfileData.avatar} alt="用户头像" />
                    ) : (
                      finalUserData.name?.charAt(0) || "U"
                    )
                  }
                </div>
                <div>
                  <input
                    type="url"
                    id="avatar"
                    name="avatar"
                    placeholder="头像图片URL"
                    value={finalProfileData.avatar || ""}
                  />
                  <small
                    style="color: #666; display: block; margin-top: 0.25rem;"
                  >
                    输入图片URL，留空使用默认头像
                  </small>
                </div>
              </div>
            </div>

            <div class="form-grid">
              <div class="form-group">
                <label for="name">姓名</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={finalUserData.name || ""}
                  readonly
                />
                <small style="color: #666;">此信息来自您的账户，无法修改</small>
              </div>

              <div class="form-group">
                <label for="email">邮箱</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={finalUserData.email || ""}
                  readonly
                />
                <small style="color: #666;">此信息来自您的账户，无法修改</small>
              </div>
            </div>

            <div class="form-group full-width">
              <label for="bio">个人简介</label>
              <textarea id="bio" name="bio" placeholder="介绍一下您自己..."
                >{finalProfileData.bio || ""}</textarea
              >
            </div>
          </div>

          <div class="profile-section">
            <h2>偏好设置</h2>

            <div class="form-grid">
              <div class="form-group">
                <label for="theme">主题</label>
                <select id="theme" name="theme">
                  <option
                    value="light"
                    selected={finalProfileData.theme === "light"}
                    >浅色主题</option
                  >
                  <option
                    value="dark"
                    selected={finalProfileData.theme === "dark"}
                    >深色主题</option
                  >
                  <option
                    value="auto"
                    selected={finalProfileData.theme === "auto"}
                    >跟随系统</option
                  >
                </select>
              </div>

              <div class="form-group">
                <label for="language">语言</label>
                <select id="language" name="language">
                  <option
                    value="zh-CN"
                    selected={finalProfileData.language === "zh-CN"}
                    >简体中文</option
                  >
                  <option
                    value="en"
                    selected={finalProfileData.language === "en"}
                    >English</option
                  >
                </select>
              </div>
            </div>
          </div>

          <div class="btn-group">
            <button type="submit" class="btn btn-primary"> 保存更改 </button>
            <button
              type="button"
              class="btn btn-secondary"
              onclick="location.reload()"
            >
              重置
            </button>
          </div>
        </form>
      </div>
    </div>

    <script type="module" is:inline>
      // 页面元素
      const avatarInput = document.getElementById("avatar");
      const avatarPreview = document.getElementById("avatar-preview");
      const alertContainer = document.getElementById("alert-container");
      const profileForm = document.getElementById("profile-form");
      const logoutBtn = document.getElementById("logout-btn");

      // 显示提示信息
      function showAlert(message, type = "error") {
        alertContainer.innerHTML = `
          <div class="alert alert-${type}">
            ${message}
          </div>
        `;
        alertContainer.scrollIntoView({ behavior: "smooth" });
      }

      // 数据已在服务器端加载，无需客户端API调用

      // 头像URL变化时更新预览
      avatarInput.addEventListener("input", (e) => {
        const url = e.target.value.trim();
        if (url) {
          const img = new Image();
          img.onload = () => {
            avatarPreview.innerHTML = `<img src="${url}" alt="用户头像" />`;
          };
          img.onerror = () => {
            avatarPreview.innerHTML = "U";
          };
          img.src = url;
        } else {
          avatarPreview.innerHTML = "U";
        }
      });

      // 表单提交
      profileForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(profileForm);
        const profileData = {
          avatar: formData.get("avatar"),
          bio: formData.get("bio"),
          theme: formData.get("theme"),
          language: formData.get("language"),
        };

        try {
          const response = await fetch("/api/profile", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(profileData),
          });

          const result = await response.json();

          if (response.ok && result.success) {
            showAlert("个人资料更新成功！", "success");
          } else {
            showAlert(result.error || "更新失败，请重试");
          }
        } catch (error) {
          showAlert("更新失败，请重试");
        }
      });

      // 获取 CSRF 令牌
      async function getCsrfToken() {
        try {
          const response = await fetch("/api/auth/csrf");
          const data = await response.json();
          return data.csrfToken;
        } catch (error) {
          return "";
        }
      }

      // 退出登录
      logoutBtn.addEventListener("click", async () => {
        try {
          // 获取CSRF token
          const csrfToken = await getCsrfToken();

          // 调用Auth.js signout端点
          const response = await fetch("/api/auth/signout", {
            method: "POST",
            headers: {
              "Content-Type": "application/x-www-form-urlencoded",
            },
            body: new URLSearchParams({
              csrfToken: csrfToken,
              callbackUrl: window.location.origin,
            }).toString(),
          });

          if (response.ok) {
            showAlert("正在退出登录...", "success");
            // 延迟跳转，让用户看到提示信息
            setTimeout(() => {
              window.location.href = "/";
            }, 1000);
          } else {
            throw new Error("Logout failed");
          }
        } catch (error) {
          console.error("[PROFILE] Logout error:", error);
          showAlert("退出登录失败，请重试");
        }
      });

      // 页面初始化完成
    </script>
  </body>
</html>
