---
export interface Props {
  roomId?: string;
}

const { roomId = 'general' } = Astro.props;
---

<div class="chat-container">
  <div class="chat-header">
    <h3>聊天室 - {roomId}</h3>
    <div class="online-count">
      <span id="online-count">0</span> 在线
    </div>
  </div>
  
  <div class="chat-messages" id="chat-messages">
    <!-- 消息将在这里显示 -->
  </div>
  
  <div class="chat-input-container">
    <input 
      type="text" 
      id="message-input" 
      placeholder="输入消息..." 
      maxlength="500"
    />
    <button id="send-button">发送</button>
  </div>
</div>

<style>
  .chat-container {
    display: flex;
    flex-direction: column;
    height: 500px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid #e0e0e0;
    background: #f8f9fa;
    border-radius: 8px 8px 0 0;
  }

  .chat-header h3 {
    margin: 0;
    color: #333;
    font-size: 1.1rem;
  }

  .online-count {
    font-size: 0.9rem;
    color: #666;
  }

  .chat-messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .chat-input-container {
    display: flex;
    padding: 1rem;
    border-top: 1px solid #e0e0e0;
    gap: 0.5rem;
  }

  #message-input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }

  #message-input:focus {
    outline: none;
    border-color: #007bff;
  }

  #send-button {
    padding: 0.75rem 1.5rem;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
  }

  #send-button:hover {
    background: #0056b3;
  }

  #send-button:disabled {
    background: #ccc;
    cursor: not-allowed;
  }

  .message {
    padding: 0.5rem;
    margin: 0.25rem 0;
    border-radius: 4px;
    max-width: 80%;
  }

  .message.own {
    background: #007bff;
    color: white;
    align-self: flex-end;
    margin-left: auto;
  }

  .message.other {
    background: #f1f1f1;
    color: #333;
    align-self: flex-start;
  }

  .message-info {
    font-size: 0.8rem;
    opacity: 0.7;
    margin-bottom: 0.25rem;
  }

  .message-content {
    word-wrap: break-word;
  }

  .system-message {
    text-align: center;
    color: #666;
    font-style: italic;
    font-size: 0.9rem;
    margin: 0.5rem 0;
  }
</style>

<script>
  class ChatClient {
    constructor(roomId) {
      this.roomId = roomId;
      this.userId = this.generateUserId();
      this.messages = [];
      this.onlineCount = 0;
      this.ws = null;
      this.isConnected = false;
      
      this.init();
    }

    generateUserId() {
      return 'user_' + Math.random().toString(36).substr(2, 9);
    }

    init() {
      this.setupEventListeners();
      this.connectWebSocket();
      this.addSystemMessage('连接到聊天室...');
    }

    setupEventListeners() {
      const messageInput = document.getElementById('message-input');
      const sendButton = document.getElementById('send-button');

      sendButton.addEventListener('click', () => this.sendMessage());
      
      messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          this.sendMessage();
        }
      });
    }

    connectWebSocket() {
      // 使用 WebSocket 进行实时通信
      this.connectWS();
    }

    connectWS() {
      const wsProtocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${wsProtocol}//${location.host}/api/chat/room/${this.roomId}?userId=${this.userId}&username=${encodeURIComponent('我')}`;
      
      this.ws = new WebSocket(wsUrl);
      
      this.ws.onopen = () => {
        this.addSystemMessage('已连接到聊天室');
        this.isConnected = true;
      };

      this.ws.onmessage = (event) => {
        try {
          const response = JSON.parse(event.data);
          
          switch (response.type) {
            case 'new-message':
              const message = response.data;
              if (message.userId !== this.userId) {
                this.addMessage(message, false);
              }
              break;
              
            case 'room-info':
              this.updateOnlineCount(response.data.userCount);
              break;
              
            case 'message-history':
              response.data.forEach(message => {
                this.addMessage(message, message.userId === this.userId);
              });
              break;
              
            case 'user-joined':
            case 'user-left':
              this.updateOnlineCount(response.data.userCount);
              break;
              
            case 'error':
              this.addSystemMessage(`错误: ${response.data.message}`);
              break;
          }
        } catch (error) {
          console.error('解析 WebSocket 消息失败:', error);
        }
      };

      this.ws.onclose = () => {
        this.isConnected = false;
        this.addSystemMessage('连接已断开，正在重连...');
        setTimeout(() => {
          this.connectWS();
        }, 3000);
      };

      this.ws.onerror = (error) => {
        console.error('WebSocket 错误:', error);
        this.addSystemMessage('连接出现错误');
      };
    }

    sendMessage() {
      const messageInput = document.getElementById('message-input');
      const sendButton = document.getElementById('send-button');
      const content = messageInput.value.trim();

      if (!content || !this.ws || this.ws.readyState !== WebSocket.OPEN) {
        return;
      }

      // 发送消息到 WebSocket
      const message = {
        type: 'send-message',
        data: {
          content: content
        }
      };

      try {
        this.ws.send(JSON.stringify(message));
        
        // 立即显示自己的消息
        this.addMessage({
          id: Date.now().toString(),
          userId: this.userId,
          username: '我',
          content: content,
          timestamp: Date.now(),
          type: 'message'
        }, true);
        
        messageInput.value = '';
      } catch (error) {
        console.error('发送消息失败:', error);
        this.addSystemMessage('发送消息失败，请检查连接');
      }
    }

    addMessage(message, isOwn = false) {
      const messagesContainer = document.getElementById('chat-messages');
      const messageElement = document.createElement('div');
      messageElement.className = `message ${isOwn ? 'own' : 'other'}`;

      const time = new Date(message.timestamp).toLocaleTimeString('zh-CN', {
        hour: '2-digit',
        minute: '2-digit'
      });

      messageElement.innerHTML = `
        <div class="message-info">${message.username} · ${time}</div>
        <div class="message-content">${this.escapeHtml(message.content)}</div>
      `;

      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    addSystemMessage(content) {
      const messagesContainer = document.getElementById('chat-messages');
      const messageElement = document.createElement('div');
      messageElement.className = 'system-message';
      messageElement.textContent = content;

      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    updateOnlineCount(count) {
      this.onlineCount = count;
      document.getElementById('online-count').textContent = count;
    }

    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  }

  // 初始化聊天客户端
  document.addEventListener('DOMContentLoaded', () => {
    const roomId = document.querySelector('.chat-container').getAttribute('data-room-id') || 'general';
    new ChatClient(roomId);
  });
</script>